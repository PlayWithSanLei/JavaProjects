import org.apache.tools.ant.util.TeeOutputStream

dependencies {
    testImplementation(platform('org.junit:junit-bom:5.7.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

/* NEW: (REQUIRES CODE REWRITES IN BOOK AND TEST CODE)
-> http://junit.org/junit5/docs/current/user-guide/

ext {
    junitJupiterVersion  = '5.0.0-M3'
}

dependencies {
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
}


junitPlatform {
    platformVersion '1.0.0-M3'

    filters {
        packages {
            exclude 'collectiontopics.jmh'
        }
        includeClassNamePattern '.*'
    }
}
*/

/* Store test output in $projectName/tests
  JUnit 5's junitPlatformTest runs as a "javaExec" rather than a "test",
  so we can't hook into the before/after test behavior.
*/
tasks.findByPath(":$name:test").configure {
    File testDir = file("tests")
    if(testDir.exists()) {
        File outFile = new File(testDir, 'report.txt')

        Writer taskOutput

        doFirst {
            taskOutput = project.file(outFile).newWriter()
        }

        testLogging.showStandardStreams = true

        onOutput { descriptor, event ->
            taskOutput.append(event.message)
        }

        doLast {
            // WARNING: if the task fails, this won't be executed and the file remains open.
            // The memory cache version doesn't have this problem.
            taskOutput.close()

            if(outFile.size() == 0)
                outFile.delete()
            else if(outFile.text.contains("0 tests found"))
                outFile.delete()
        }
    }
}
